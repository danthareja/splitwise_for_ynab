generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  splitwiseSettings SplitwiseSettings?
  ynabSettings      YnabSettings?
  syncHistory       SyncHistory[]
  syncState         SyncState?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SplitwiseSettings {
  id               String    @id @default(cuid())
  userId           String    @unique
  groupId          String?
  groupName        String?
  currencyCode     String?
  emoji            String?   @default("âœ…")
  currencySyncedAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model YnabSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  budgetId             String
  budgetName           String
  splitwiseAccountId   String?
  splitwiseAccountName String?
  manualFlagColor      String   @default("blue")
  syncedFlagColor      String   @default("green")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SyncHistory {
  id           String       @id @default(cuid())
  userId       String
  status       String       @default("success") // success, error, partial
  errorMessage String?
  startedAt    DateTime     @default(now())
  completedAt  DateTime?
  syncedItems  SyncedItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SyncedItem {
  id            String   @id @default(cuid())
  externalId    String // Ynab transaction ID or Splitwise expense ID
  type          String // "ynab_transaction" or "splitwise_expense"
  amount        Float
  description   String?
  date          String // ISO date string (YYYY-MM-DD)
  syncHistoryId String
  direction     String // "ynab_to_splitwise" or "splitwise_to_ynab"
  status        String  @default("success") // "success", "error"
  errorMessage  String? // when status is "error"

  syncHistory SyncHistory @relation(fields: [syncHistoryId], references: [id], onDelete: Cascade)
}

model SyncState {
  id                  String    @id @default(cuid())
  userId              String    @unique
  ynabServerKnowledge String? // Stored as string to preserve precision
  splitwiseLastSynced DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
